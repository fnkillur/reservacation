{"version":3,"sources":["components/Image.js","components/DescriptionBox.js","components/TitleBox.js","organisms/StoreCard.js","_common/services/_/api.service.js","_common/services/store.service.js","components/Map.js","organisms/StoreList.js","components/Modal.js","components/Input.js","_common/services/booking.service.js","pages/Reservation.js","components/SectionDivider.js","components/ImageUpload.js","organisms/ReviewForm.js","organisms/ReviewCard.js","organisms/Pagination.js","_common/services/review.service.js","organisms/ReviewList.js","_common/services/user.service.js","pages/StoreDetail.js","pages/App.js","organisms/AuthForm.js","pages/Auth.js","routers/Router.js","serviceWorker.js","index.js"],"names":["Image","props","react_default","a","createElement","src","alt","onError","onerror","style","margin","padding","width","height","DescriptionBox","textOverflow","overflow","whiteSpace","contents","TitleBox","fontWeight","StoreCard","imgSrc","imgAlt","name","address","tel","description","className","components_Image","components_TitleBox","components_DescriptionBox","convertUrl","url","defaultUrl","getAction","config","axios","get","postAction","post","setMe","me","sessionStorage","setItem","JSON","stringify","getMe","parse","getItem","removeMe","removeItem","getStoreById","id","apiService","concat","getAroundStores","position","bot","left","top","right","map","StoreList","state","stores","fetchStores","_callee","res","regenerator_default","wrap","_context","prev","next","sent","_this","setState","data","stop","this","renderStores","store","key","Link","to","src_organisms_StoreCard","img_src","store_name","detail_address","store_tel","store_description","Component","Map","addEventListener","daum","maps","event","addListener","changeHandler","bounds","getBounds","swLatLng","getSouthWest","neLatLng","getNorthEast","getLat","getLng","fetchAroundStores","storeService","renderMarket","t0","console","error","forEach","marker","Marker","LatLng","latitude","longitude","overlay","CustomOverlay","content","getPosition","setMap","showPosition","window","coords","mapContainer","document","getElementById","mapOption","center","level","_this2","navigator","geolocation","watchPosition","alert","enableHighAccuracy","maximumAge","timeout","innerHeight","fontawesome","add","faTimes","Modal","_this$props","children","onClose","textDecoration","index_es","onClick","icon","Input","boxSizing","borderRadius","fontSize","backgroundColor","border","placeholder","value","onChange","type","required","bookStore","form","defaults","headers","common","token","storeId","Reservation","waitingCount","myTeamCount","status","fetchWaitingCount","match","params","fetchMyReservation","_callee2","_context2","_callee3","_context3","customerCount","bookingService","message","booking","response","handleChange","e","Object","defineProperty","target","getCallbackUrl","queryParams","location","search","replace","RegExp","notice","src_components_Modal","components_Input","SectionDivider","borderBottom","ImageUpload","ReviewForm","file","handleUpload","preventDefault","reader","FileReader","files","onloadend","result","readAsDataURL","handleSubmit","onCreate","onSubmit","components_ImageUpload","ReviewCard","faAngleRight","Pagination","perPageNo","totalPageCount","pageNo","parseInt","classLeft","classRight","faAngleLeft","getReviewsByStoreId","ReviewList","reviews","fetchStoreReviews","reviewPageNo","reviewService","pushQueryString","renderReviews","review","src_organisms_ReviewCard","title","src_organisms_Pagination","refreshMe","then","catch","log","StoreDetail","images","reviewFormClass","fetchStoreDetail","renderStoreCard","renderImages","img","history","push","toggleReviewForm","handleCreate","query","queryString","pathname","components_SectionDivider","src_organisms_ReviewList","src_organisms_ReviewForm","App","src_organisms_StoreList","src_components_Map","Switch","Route","path","component","AuthForm","email","password","rePassword","phone","role","getFormData","formIndex","slice","formData","formEndIndex","input","index","formTitle","Auth","split","pop","login","register","toUrl","href","callbackUrl","renderBtnLink","kind","src_organisms_AuthForm","Router","BrowserRouter","exact","Boolean","hostname","ReactDOM","render","routers_Router","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bf27fa1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Image = (props) => {    \n    let styles = {\n        margin: '0',\n        padding : '0',\n        width : '100%',\n        height : '100%',\n    };\n    \n    return (\n        <img src={props.src} alt={props.alt} onError={props.onerror} style={styles} />\n    );\n};\n\nImage.propTypes = {\n    src: PropTypes.string,\n    alt: PropTypes.string,\n    onError: PropTypes.string,\n};\n\nexport default Image;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DescriptionBox = (props) => {\n    let styles = {\n        margin: '0',\n        padding: '0',\n        width: '100%',\n        height: '100%',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n    };\n\n    return (\n        <p style={styles}>{props.contents}</p>\n    );\n};\n\nDescriptionBox.propTypes = {\n    contents: PropTypes.string.isRequired,\n};\n\nexport default DescriptionBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TitleBox = (props) => {\n    let styles = {\n        margin: '0',\n        padding: '0',\n        width: '100%',\n        height: '100%',\n        fontWeight: 'bold',\n    };\n\n    return (\n        <span style={styles}>{props.contents}</span>\n    );\n};\n\nTitleBox.propTypes = {\n    contents: PropTypes.string.isRequired,\n};\n\nexport default TitleBox;","import React from 'react';\nimport Image from '../components/Image';\nimport DescriptionBox from '../components/DescriptionBox';\nimport TitleBox from '../components/TitleBox';\nimport './StoreCard.scss';\nimport PropTypes from 'prop-types';\n\nconst StoreCard = (props) => {\n    const { imgSrc, imgAlt, name, address, tel, description } = props;\n    \n    return (\n        <article className='store-card'>\n            <section className='store-img'>\n                <Image\n                    src={imgSrc}\n                    alt={imgAlt} />\n            </section>\n            <section className='store-contents'>\n                <section className='store-title'>\n                    <TitleBox contents={name} />\n                </section>\n                <section className='store-description'>\n                    <DescriptionBox contents={address} />\n                    <DescriptionBox contents={tel} />\n                    <DescriptionBox contents={description} />\n                </section>\n            </section>\n        </article>\n    );\n};\n\nStoreCard.propTypes = {\n    imgSrc: PropTypes.string,\n    imgAlt: PropTypes.string,\n    name: PropTypes.string,\n    address: PropTypes.string,\n    tel: PropTypes.string,\n    description: PropTypes.string,\n};\n\nexport default StoreCard;","import axios from 'axios';\nimport { defaultUrl } from '../../const/const';\n\nlet convertUrl = (url) => {\n    return defaultUrl + '/' + url;\n};\n\nexport function getAction(url, config) {\n    return axios.get(convertUrl(url), config);\n}\n\nexport function postAction(url, config) {\n    return axios.post(convertUrl(url), config);\n}\n\nexport function putAction(url, config) {\n    return axios.put(convertUrl(url), config);\n}\n\nexport function deleteAction(url, config) {\n    return axios.delete(convertUrl(url), config);\n}\n\nexport function setMe(me) {\n    sessionStorage.setItem('me', JSON.stringify(me));\n}\n\nexport function getMe() {\n    return JSON.parse(sessionStorage.getItem('me'));\n}\n\nexport function removeMe() {\n    sessionStorage.removeItem('me');\n}\n\nexport function setAuthorization() {\n    let me = this.getMe();\n    axios.defaults.headers.common['Authorization'] = `Bearer ${me.token}`;\n}","import * as apiService from '../services/_/api.service';\n\nexport function getStores() {\n    return apiService.getAction('stores');\n}\n\nexport function getStoreById(id) {\n    return apiService.getAction(`store/${id}`);\n}\n\nexport function getAroundStores(position) {\n    return apiService.getAction(`stores/around?bot=${position.bot}&left=${position.left}&top=${position.top}&right=${position.right}`);\n}","/* eslint-disable no-useless-constructor,no-loop-func */\n/*global daum*/\n\nimport React, {Component} from 'react';\nimport './Map.scss';\nimport * as storeService from '../_common/services/store.service';\n\nlet map;\n\nclass Map extends Component {\n\n    addEventListener = () => {\n        // 중심 위치 변경 이벤트\n        daum.maps.event.addListener(map, 'center_changed', () => {\n            this.changeHandler();\n        });\n\n        // 확대 축소 이벤트\n        daum.maps.event.addListener(map, 'zoom_changed', () => {\n            this.changeHandler();\n        });\n    };\n\n    changeHandler = () => {\n        let bounds = map.getBounds();\n        // 현재 지도의 남서쪽 좌표\n        let swLatLng = bounds.getSouthWest();\n        // 현재 지도의 북동쪽 좌표\n        let neLatLng = bounds.getNorthEast();\n\n        let position = {\n            bot: swLatLng.getLat(),\n            left: swLatLng.getLng(),\n            top: neLatLng.getLat(),\n            right: neLatLng.getLng()\n        };\n\n        this.fetchAroundStores(position);\n    };\n\n    fetchAroundStores = async (position) => {\n        try {\n            let res = await storeService.getAroundStores(position);\n            this.renderMarket(res.data);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    renderMarket = (stores) => {\n        stores.forEach(store => {\n            let marker = new daum.maps.Marker({\n                map: map,\n                position: new daum.maps.LatLng(store.latitude, store.longitude)\n            });\n\n            let overlay = new daum.maps.CustomOverlay({\n                content: store.store_name,\n                map: map,\n                position: marker.getPosition()\n            });\n\n            (function (marker, overlay) {\n                daum.maps.event.addListener(marker, 'click', function () {\n                    overlay.setMap(map);\n                });\n            })(marker, overlay);\n        });\n    };\n\n    showPosition = (position) => {\n        if ((\"daum\" in window)) {\n            let latitude = position.coords.latitude;\n            let longitude = position.coords.longitude;\n            let mapContainer = document.getElementById('map'),\n                mapOption = {\n                    center: new daum.maps.LatLng(latitude, longitude),\n                    level: 3\n                };\n\n            map = new daum.maps.Map(mapContainer, mapOption);\n\n            this.addEventListener();\n        }\n    };\n\n\n    componentDidMount() {\n        let geo_success = (position) => {\n            this.showPosition(position);\n        };\n\n        let geo_error = () => {\n            alert('허용하지 않으면 이 서비스 사용에 제한됩니다.');\n            this.showPosition({\n                coords: {\n                    latitude: 33.506525,\n                    longitude: 126.492780\n                }\n            });\n        };\n\n        let geo_options = {\n            enableHighAccuracy: true,\n            maximumAge: 30000,\n            timeout: 20000\n        };\n\n        navigator.geolocation.watchPosition(geo_success, geo_error, geo_options);\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div id=\"map\" style={{height: window.innerHeight + 'px'}}/>\n            </div>\n        )\n    };\n}\n\nexport default Map;","import React, { Component } from 'react';\nimport './StoreList.scss';\nimport { Link } from 'react-router-dom';\nimport StoreCard from '../organisms/StoreCard';\nimport * as storeService from '../_common/services/store.service';\n\nclass StoreList extends Component {\n\n    state = {\n        stores: ''\n    }\n\n    componentDidMount() {\n        this.fetchStores();\n    }\n\n    fetchStores = async () => {\n        let res = await storeService.getStores();\n        this.setState({\n            stores: res.data\n        });\n    };\n\n    renderStores = () => {\n        return this.state.stores.map((store) => {\n            return <article\n                className='store'\n                key={store.id}>\n                <Link to={`stores/${store.id}?reviewPageNo=1&perPageNo=5`}>\n                    <StoreCard\n                        imgSrc={store.img_src}\n                        imgAlt={store.store_name}\n                        name={store.store_name}\n                        address={store.address + store.detail_address}\n                        tel={store.store_tel}\n                        description={store.store_description} />\n                </Link>\n            </article>\n        });\n    };\n\n    render() {\n        return (\n            <div className='store-list'>\n                {this.state.stores && this.renderStores()}\n            </div>\n        );\n    }\n}\n\nexport default StoreList;","import React, { Component } from 'react';\nimport './Modal.scss';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as fontawesome from \"@fortawesome/fontawesome-svg-core\";\nimport { faTimes } from '@fortawesome/fontawesome-free-solid'\n\nfontawesome.library.add(faTimes);\n\nclass Modal extends Component {\n    render() {\n        const { to, children, onClose } = this.props;\n\n        return (\n            <div className='backdrop'>\n                <div className='modal'>\n                    <section className='close'>\n                        <Link to={to} style={{ textDecoration: 'none' }}><FontAwesomeIcon onClick={onClose} icon={faTimes} /></Link>\n                    </section>\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}\n\nModal.propTypes = {\n    to: PropTypes.string.isRequired,\n    children: PropTypes.node,\n};\n\nexport default Modal;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Input = (props) => {\n    let style = {\n        boxSizing: 'border-box',\n        borderRadius: '5px',\n        padding: '10px',\n        margin: '0',\n        width: '100%',\n        fontSize: '13px',\n        backgroundColor: '#fafbfc',\n        border: '1px solid #d1d5da',\n    };\n\n    return (\n        <input style={style}\n            placeholder={props.placeholder}\n            value={props.value}\n            onChange={props.onChange}\n            type={props.type || 'text'}\n            name={props.name}\n            required={props.required}\n        />\n    );\n};\n\nInput.propTypes = {\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    required: PropTypes.bool\n};\n\nexport default Input;","import * as apiService from '../services/_/api.service';\n\nexport function getWaitingCount(storeId) {\n    return apiService.getAction(`bookings/${storeId}/waitingCount`);\n}\n\nexport function getMyReservation(storeId) {\n    return apiService.getAction(`bookings/${storeId}`)\n}\n\nexport function bookStore(form) {\n    apiService.setAuthorization();\n    return apiService.postAction(`bookings/${form.storeId}`, form);\n}","import React, { Component } from 'react';\nimport './Reservation.scss';\nimport TitleBox from '../components/TitleBox';\nimport Modal from '../components/Modal';\nimport Input from '../components/Input';\nimport DescriptionBox from '../components/DescriptionBox';\nimport * as bookingService from '../_common/services/booking.service';\n\nclass Reservation extends Component {\n\n    state = {\n        waitingCount: 0,\n        myTeamCount: 0,\n        status: ''\n    }\n\n    componentDidMount() {\n        this.fetchWaitingCount();\n        this.fetchMyReservation();\n    }\n\n    fetchWaitingCount = async () => {\n        try {\n            let res = await bookingService.getWaitingCount(this.props.match.params.id);\n            this.setState({\n                waitingCount: res.data.waitingCount\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    fetchMyReservation = async () => {\n        try {\n            let res = await bookingService.getMyReservation(this.props.match.params.id);\n            this.setState({\n                status: res.data.status\n            })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    bookStore = async () => {\n        let form = {\n            storeId: this.props.match.params.id,\n            customerCount: this.state.myTeamCount\n        };\n        try {\n            let res = await bookingService.bookStore(form);\n            alert(res.data.message);\n            res.data.booking && this.setState({\n                status: res.data.booking.status\n            });\n            this.fetchWaitingCount();\n        } catch (error) {\n            error.response.status === 406 && alert(error.response.data.message);\n        }\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    getCallbackUrl = () => {\n        let queryParams = this.props.location.search;\n        return queryParams && queryParams.replace(new RegExp('\\\\?.+url=', 'g'), '');\n    };\n\n    render() {\n        let notice = '';\n        switch (this.state.status) {\n            case 0:\n                notice = '예약이 취소되었습니다. 다음에 이용해주세요!';\n                break;\n            case 1:\n                notice = '가게에서 예약을 확인하고 있습니다. 잠시만 기다려주세요!';\n                break;\n            case 2:\n                notice = '예약이 접수되었습니다. 차례를 기다려주세요!';\n                break;\n            case 3:\n                notice = '차례가 되었습니다!';\n                break;\n            default:\n                notice = '예약 신청하기 버튼을 눌러 예약을 요청하세요!';\n                break;\n        }\n\n        return (\n            <Modal to={this.getCallbackUrl()}>\n                <article className='reservation'>\n                    <button className='btn-request' onClick={this.bookStore}>에약 신청하기</button>\n                    <section className='wait-people'>\n                        <TitleBox contents='예상 대기 팀' />\n                        <div className='wait-count'>{this.state.waitingCount}</div>\n                    </section>\n                    <section className='select-person'>\n                        <TitleBox contents='예약 인원 수' />\n                        <section className='select-input'>\n                            <Input\n                                placeholder='0명'\n                                value={this.state.myTeamCount}\n                                onChange={this.handleChange}\n                                name='myTeamCount' />\n                        </section>\n                    </section>\n                    <section className='reserve-notice'>\n                        <DescriptionBox contents={notice} />\n                    </section>\n                </article>\n            </Modal>\n        );\n    }\n}\n\nexport default Reservation;","import React from 'react';\n\nconst SectionDivider = () => {\n    let style = {\n        width: '100%',\n        height: 0,\n        borderBottom: '1px solid #e6e6e6',\n        margin: '10px 0',\n    };\n\n    return (\n        <div className='section-divider' style={style}/>\n    );\n};\n\nexport default SectionDivider;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ImageUpload = (props) => {\n    return (\n        <input\n            type='file'\n            name={props.name}\n            onChange={props.onChange} />\n    );\n};\n\nImageUpload.propTypes = {\n    name: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default ImageUpload;","import React, { Component } from 'react';\nimport './ReviewForm.scss';\nimport Image from '../components/Image';\nimport ImageUpload from '../components/ImageUpload';\n\nclass ReviewForm extends Component {\n\n    state = {\n        file: '',\n        imgSrc: '',\n        description: '',\n        storeId: this.props.storeId\n    }\n\n    handleUpload = e => {\n        e.preventDefault();\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = () => {\n            this.setState({\n                file: file,\n                imgSrc: reader.result\n            });\n        }\n        reader.readAsDataURL(file)\n    };\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.onCreate(this.state);\n        this.setState({\n            file: '',\n            imgSrc: '',\n            description: '',\n            storeId: this.props.storeId\n        })\n    };\n\n    render() {\n        return (\n            <form className='review-form' onSubmit={this.handleSubmit}>\n                <section className='upload-input'>\n                    <section className='image'>\n                        <section className='thumbnail'>\n                            <Image src={this.state.imgSrc} />\n                        </section>\n                        <section className='image-upload'>\n                            <ImageUpload\n                                name='imgSrc'\n                                onChange={this.handleUpload}\n                            />\n                        </section>\n                    </section>\n                    <textarea className='contents' name='description' onChange={this.handleChange}></textarea>\n                </section>\n                <section className='upload-button'>\n                    <button className='btn-upload' type='submit'>리뷰 등록하기</button>\n                </section>\n            </form>\n        );\n    }\n}\n\nexport default ReviewForm;","import React from 'react';\nimport Image from '../components/Image';\nimport DescriptionBox from '../components/DescriptionBox';\nimport './ReviewCard.scss';\nimport PropTypes from 'prop-types';\n\nconst ReviewCard = (props) => {\n    return (\n        <article className='review-card'>\n            <section className='img'>\n                <Image\n                    src={props.imgSrc}\n                    alt={props.imgAlt} />\n            </section>\n            <section className='description'>\n                <DescriptionBox contents={props.description} />\n            </section>\n        </article>\n    );\n};\n\nReviewCard.propTypes = {\n    imgSrc: PropTypes.string,\n    imgAlt: PropTypes.string,\n    description: PropTypes.string.isRequired,\n};\n\nexport default ReviewCard;","import React, { Component } from 'react';\nimport './Pagination.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as fontawesome from \"@fortawesome/fontawesome-svg-core\";\nimport { faAngleLeft, faAngleRight } from '@fortawesome/fontawesome-free-solid'\n\nfontawesome.library.add(faAngleRight);\n\nclass Pagination extends Component {\n    render() {\n        const { perPageNo, totalPageCount, onClick } = this.props;\n        let pageNo = parseInt(this.props.pageNo);\n        let classLeft = (pageNo === 1 && 'hide') || 'btn-left';\n        let classRight = ((!totalPageCount || parseInt(totalPageCount) === pageNo) && 'hide') || 'btn-right';\n\n        return (\n            <div className='pagination'>\n                <section className={classLeft}>\n                    <FontAwesomeIcon onClick={() => { onClick(pageNo - 1, perPageNo) }} icon={faAngleLeft} />\n                </section>\n                <section className='children'>\n                    {this.props.children}\n                </section>\n                <section className={classRight}>\n                    <FontAwesomeIcon onClick={() => { onClick(pageNo + 1, perPageNo) }} icon={faAngleRight} />\n                </section>\n            </div>\n        );\n    }\n}\n\n\nexport default Pagination;","import * as apiService from '../services/_/api.service';\n\nexport function getReviewsByStoreId(storeId, pageNo, perPageNo) {\n    return apiService.getAction(`reviews/${storeId}?pageNo=${pageNo}&perPageNo=${perPageNo}`);\n}\n\nexport function writeReview(form) {\n    return apiService.postAction('reviews', form);\n}","import React, { Component } from 'react';\nimport './ReviewList.scss';\nimport ReviewCard from '../organisms/ReviewCard';\nimport Pagination from './Pagination';\nimport * as reviewService from '../_common/services/review.service';\n\nclass ReviewList extends Component {\n\n    state = {\n        reviews: ''\n    }\n\n    componentDidMount() {\n        this.fetchStoreReviews(this.props.reviewPageNo, this.props.perPageNo);\n    }\n\n    fetchStoreReviews = async (reviewPageNo, perPageNo) => {\n        let res = await reviewService.getReviewsByStoreId(this.props.id, reviewPageNo - 1, perPageNo);\n\n        this.setState({\n            reviews: res.data,\n        });\n\n        this.props.pushQueryString(reviewPageNo, perPageNo);\n    }\n\n    renderReviews = () => {\n        return (this.state.reviews.totalPageCount\n            && this.state.reviews.data.map(review => {\n                return <div className='review' key={review.id}>\n                    <ReviewCard\n                        imgSrc={review.img_src}\n                        imgAlt={review.title}\n                        description={review.description}\n                    />\n                </div>\n            })) || <div>등록된 리뷰가 없습니다. 리뷰를 남겨주세요!</div>;\n    };\n\n    render() {\n        return (\n            <div className='review-list'>\n                <Pagination\n                    pageNo={this.props.reviewPageNo}\n                    perPageNo={this.props.perPageNo}\n                    totalPageCount={this.state.reviews.totalPageCount}\n                    onClick={this.fetchStoreReviews}>\n                    {this.state.reviews && this.renderReviews()}\n                </Pagination>\n            </div>\n        );\n    }\n}\n\nexport default ReviewList;","import axios from 'axios';\nimport * as apiService from '../services/_/api.service';\n\nexport function findPassword() {\n\n}\n\nexport function login(form) {\n    return apiService.postAction('auth/token', form);\n}\n\nexport function register(form) {\n    return apiService.postAction('users', form);\n}\n\nexport function setLogin(me) {\n    apiService.setMe(me);\n}\n\nexport function identifyLogin() {\n    refreshMe();\n    return apiService.getMe();\n}\n\nlet refreshMe = () => {\n    let me = apiService.getMe();\n    if (me) {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${me.token}`;\n        apiService.postAction('auth/newToken')\n            .then(res => {\n                apiService.removeMe();\n                apiService.setMe({ token: res.data.token });\n                axios.defaults.headers.common['Authorization'] = `Bearer ${apiService.getMe().token}`;\n            })\n            .catch(error => {\n                console.log(error);\n                apiService.removeMe();\n            });\n    }\n};","import React, { Component } from 'react';\nimport './StoreDetail.scss';\nimport { Link } from 'react-router-dom';\nimport queryString from 'query-string';\nimport Image from '../components/Image';\nimport TitleBox from '../components/TitleBox';\nimport SectionDivider from '../components/SectionDivider';\nimport Modal from '../components/Modal';\nimport StoreCard from '../organisms/StoreCard';\nimport ReviewForm from '../organisms/ReviewForm';\nimport ReviewList from '../organisms/ReviewList';\nimport * as storeService from '../_common/services/store.service';\nimport * as userService from '../_common/services/user.service';\nimport * as reviewService from '../_common/services/review.service';\n\n\nclass StoreDetail extends Component {\n\n    state = {\n        store: '',\n        images: '',\n        reviewFormClass: false\n    }\n\n    componentDidMount() {\n        let id = this.props.match.params.id;\n        id && this.fetchStoreDetail(id);\n    }\n\n    fetchStoreDetail = async (id) => {\n        try {\n            let res = await storeService.getStoreById(id);\n            this.setState({\n                store: res.data.store,\n                images: res.data.images\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    renderStoreCard = () => {\n        let store = this.state.store;\n        return <StoreCard\n            imgSrc={store.img_src}\n            imgAlt={store.store_name}\n            name={store.store_name}\n            address={store.address + store.detail_address}\n            tel={store.store_tel}\n            description={store.store_description}\n        />;\n    };\n\n    renderImages = () => {\n        return this.state.images.map(img => {\n            return <div className='img' key={img.id}>\n                <Image\n                    src={img.src}\n                    alt={this.state.store.store_name} />\n            </div>;\n        });\n    };\n\n    pushQueryString = (reviewPageNo, perPageNo) => {\n        this.props.history.push({\n            search: `?reviewPageNo=${reviewPageNo}&perPageNo=${perPageNo}`\n        });\n    };\n\n    toggleReviewForm = () => {\n        this.setState({\n            reviewFormClass: !this.state.reviewFormClass\n        })\n    };\n\n    handleCreate = async (review) => {\n        try {\n            let res = await reviewService.writeReview(review);\n            alert(res.data.message);\n            this.toggleReviewForm();\n        } catch (error) {\n            alert(error.response.data.message);\n        }\n    };\n\n    render() {\n        let id = this.props.match.params.id;\n        let query = queryString.parse(this.props.location.search);\n        let token = userService.identifyLogin();\n\n        return (\n            <Modal to={'/stores'}>\n                <article className='store-detail'>\n                    {(token && <Link to={{\n                        pathname: `/stores/${id}/reserve`,\n                        search: `callback_url=/stores/${id}?reviewPageNo=${query.reviewPageNo}&perPageNo=${query.perPageNo}`\n                    }}>\n                        <button className='btn-reserve'>예약하기</button>\n                    </Link>)\n                        || <Link to={{\n                            pathname: '/auth/login',\n                            search: `callback_url=/stores/${id}?reviewPageNo=${query.reviewPageNo}&perPageNo=${query.perPageNo}`\n                        }}>\n                            <button className='btn-reserve'>로그인 후 예약하기</button>\n                        </Link>}\n                    <SectionDivider />\n                    <section className='store-info'>\n                        {this.state.store && this.renderStoreCard()}\n                    </section>\n                    <SectionDivider />\n                    <TitleBox contents={(this.state.images && `${this.state.store.store_name}의 분위기 넘치는 사진들`) || ''} />\n                    <section className='img-list'>\n                        {this.state.images && this.renderImages()}\n                    </section>\n                    <SectionDivider />\n                    <TitleBox contents={(this.state.images && `${this.state.store.store_name}의 생생한 리뷰들`) || ''} />\n                    <section className='store-reviews'>\n                        <ReviewList\n                            id={id}\n                            reviewPageNo={query.reviewPageNo}\n                            perPageNo={query.perPageNo}\n                            pushQueryString={this.pushQueryString} />\n                    </section>\n                    <SectionDivider />\n                    <section className='review-button'>\n                        {(token && <button className='btn-review' onClick={this.toggleReviewForm}>\n                            {(!this.state.reviewFormClass && '리뷰 작성하기') || '작성 취소'}\n                        </button>)}\n                    </section>\n                    <section className={(this.state.reviewFormClass && 'review-create') || 'review-hidden'}>\n                        <ReviewForm storeId={id} onCreate={this.handleCreate} />\n                    </section>\n                </article>\n            </Modal >\n        );\n    }\n}\n\nexport default StoreDetail;","import React, { Component } from 'react';\nimport './App.scss';\nimport { Route, Switch } from 'react-router-dom';\nimport StoreList from '../organisms/StoreList';\nimport Map from '../components/Map';\nimport Reservation from './Reservation';\nimport StoreDetail from './StoreDetail';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className='main'>\n                <section className='stores'>\n                    <StoreList />\n                </section>\n                <section className='map'>\n                    <Map />\n                </section>\n\n                <Switch>\n                    <Route path={'/stores/:id/reserve'} component={Reservation} />\n                    <Route path={'/stores/:id'} component={StoreDetail} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport './AuthForm.scss';\nimport Input from '../components/Input';\n\nclass AuthForm extends Component {\n\n    state = {\n        email: '',\n        password: '',\n        rePassword: '',\n        phone: '',\n        name: '',\n        role: 'user'\n    };\n\n    getFormData = (formIndex) => {\n        let formData = [{\n            name: 'email',\n            value: this.state.email,\n            placeholder: 'email@example.com',\n            onChange: this.handleChange,\n        }, {\n            name: 'password',\n            value: this.state.password,\n            placeholder: '비밀번호',\n            onChange: this.handleChange,\n            type: 'password'\n        }, {\n            name: 'rePassword',\n            value: this.state.rePassword,\n            placeholder: '비밀번호 확인',\n            onChange: this.handleChange,\n            type: 'password'\n        }, {\n            name: 'phone',\n            value: this.state.phone,\n            placeholder: '연락처',\n            onChange: this.handleChange\n        }, {\n            name: 'name',\n            value: this.state.name,\n            placeholder: '이름',\n            onChange: this.handleChange\n        }];\n\n        return formData.slice(0, formIndex);\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.rePassword && (this.state.password !== this.state.rePassword)) {\n            alert('패스워드를 확인해주세요.');\n            return;\n        }\n        this.props.onCreate(this.state);\n        this.setState({\n            email: '',\n            password: '',\n            rePassword: '',\n            phone: '',\n            name: ''\n        })\n    };\n\n    render() {\n        let formData = this.getFormData(this.props.formEndIndex);\n\n        return (\n            <form className='auth-form' onSubmit={this.handleSubmit}>\n                {formData.map((input, index) => {\n                    return <section className='form-inner' key={index}>\n                        <Input\n                            name={input.name}\n                            value={input.value}\n                            placeholder={input.placeholder}\n                            onChange={input.onChange}\n                            type={input.type}\n                            required={true}\n                        />\n                    </section>\n                })}\n                <section className='form-inner'>\n                    <button type='submit' className='btn-submit'>{this.props.formTitle}</button>\n                </section>\n            </form>\n        );\n    }\n}\n\nexport default AuthForm;\n","import React, { Component } from 'react';\nimport './Auth.scss';\nimport { Link } from 'react-router-dom';\nimport TitleBox from '../components/TitleBox';\nimport AuthForm from '../organisms/AuthForm';\nimport DescriptionBox from '../components/DescriptionBox';\nimport SectionDivider from '../components/SectionDivider';\nimport * as userService from '../_common/services/user.service';\n\nclass Auth extends Component {\n\n    getCallbackUrl = () => {\n        let queryParams = this.props.location.search;\n        return queryParams && queryParams.replace(new RegExp('\\\\?.+url=', 'g'), '');\n    };\n\n    handleCreate = (formData) => {\n        let kind = this.props.match.path.split('/').pop();\n\n        switch (kind) {\n            case 'findPassword':\n                //TODO: 패스워드 찾기 로직\n                break;\n            case 'login':\n                this.login(formData);\n                break;\n            case 'register':\n                this.register(formData);\n                break;\n            default:\n                console.log('url 오류');\n                break;\n        }\n    };\n\n    login = async (formData) => {\n        try {\n            let res = await userService.login(formData);\n            userService.setLogin(res.data);\n            let toUrl = this.getCallbackUrl() || '/stores';\n            window.location.href = toUrl;\n        } catch (error) {\n            alert(error.response.data.message);\n        }\n    };\n\n    register = async (formData) => {\n        let callbackUrl = this.getCallbackUrl();\n        try {\n            let res = await userService.register(formData);\n            alert(res.data.message);\n            let toUrl = (callbackUrl && `/auth/login?callback_url=${callbackUrl}`) || '/auth/login';\n            window.location.href = toUrl;\n        } catch (error) {\n            alert(error.response.data.message);\n        }\n    };\n\n    renderBtnLink = () => {\n        let callbackUrl = this.getCallbackUrl();\n\n        return <section className='link-list'>\n            <section className='link-box'>\n                <section className='description-box'>\n                    <DescriptionBox contents={'새로 오셨나요?'} />\n                </section>\n                <Link to={{ pathname: '/auth/register', search: `callbackUrl && callback_url=${callbackUrl}` }}>\n                    <button className='btn-link'>회원가입</button>\n                </Link>\n            </section>\n            <SectionDivider />\n            <section className='link-box'>\n                <section className='description-box'>\n                    <DescriptionBox contents={'비밀번호를 잊으셨나요?'} />\n                </section>\n                <Link to={{ pathname: '/auth/findPassword', search: `callback_url=${callbackUrl}` }}>\n                    <button className='btn-link'>비밀번호 찾기</button>\n                </Link>\n            </section>\n        </section>;\n    };\n\n    render() {\n        let kind = this.props.match.path.split('/').pop();\n        let formEndIndex = 0;\n        let formTitle = '';\n        switch (kind) {\n            case 'findPassword':\n                formEndIndex = 1;\n                formTitle = '이메일로 비밀번호 찾기';\n                break;\n            case 'login':\n                formEndIndex = 2;\n                formTitle = '로그인';\n                break;\n            case 'register':\n                formEndIndex = 5;\n                formTitle = '회원가입'\n                break;\n            default:\n                console.log('url 오류');\n                break;\n        }\n\n        return (\n            <article className='auth'>\n                <section className='title'>\n                    <section className='logo'>\n                        <Link to='/stores'>\n                            <img src='' alt='로고' />\n                        </Link>\n                    </section>\n                    <TitleBox contents={`Reservacation ${formTitle}`} />\n                </section>\n                <AuthForm formEndIndex={formEndIndex} formTitle={formTitle} onCreate={this.handleCreate} />\n                {kind === 'login' && this.renderBtnLink()}\n            </article>\n        );\n    }\n}\n\nexport default Auth;","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport App from '../pages/App';\nimport Auth from '../pages/Auth';\n\nclass Router extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div>\n                    <Route exact path=\"/\" component={App} />\n                    <Route path=\"/stores\" component={App} />\n                    <Route path='/auth/login' component={Auth} />\n                    <Route path='/auth/register' component={Auth} />\n                    <Route path='/auth/findPassword' component={Auth} />\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './routers/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}