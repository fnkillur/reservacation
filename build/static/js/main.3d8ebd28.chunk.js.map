{"version":3,"sources":["components/Map.js","components/Image.js","_common/const/const.js","components/DescriptionBox.js","components/TitleBox.js","organisms/StoreCard.js","organisms/StoreList.js","components/Modal.js","components/Input.js","_common/services/_/api.service.js","_common/services/booking.service.js","pages/Reservation.js","components/SectionDivider.js","components/ImageUpload.js","organisms/ReviewForm.js","organisms/ReviewCard.js","organisms/Pagination.js","_common/services/review.service.js","organisms/ReviewList.js","_common/services/store.service.js","_common/services/user.service.js","pages/StoreDetail.js","pages/App.js","organisms/AuthForm.js","pages/Auth.js","routers/Router.js","serviceWorker.js","index.js"],"names":["map","Image","props","react_default","a","createElement","src","alt","onError","onerror","style","margin","padding","width","height","isMobile","window","screen","DescriptionBox","styles","textOverflow","overflow","whiteSpace","contents","TitleBox","fontWeight","StoreCard","imgSrc","imgAlt","name","address","tel","description","className","components_Image","components_TitleBox","components_DescriptionBox","StoreList","renderStores","perPageNo","_this","stores","store","key","id","Link","to","concat","src_organisms_StoreCard","img_src","store_name","detail_address","store_tel","store_description","this","length","Component","Map","state","isSearch","addEventListener","daum","maps","event","addListener","handleMove","setState","searchStores","bounds","getBounds","swLatLng","getSouthWest","neLatLng","getNorthEast","position","bot","getLat","left","getLng","top","right","handleSearch","renderMarket","forEach","marker","Marker","LatLng","latitude","longitude","overlay","CustomOverlay","content","getPosition","setMap","showPosition","coords","mapContainer","document","getElementById","mapOption","center","level","_this2","navigator","geolocation","watchPosition","enableHighAccuracy","maximumAge","timeout","type","onClick","innerHeight","fontawesome","add","faTimes","Modal","_this$props","children","onClose","textDecoration","index_es","icon","Input","boxSizing","borderRadius","fontSize","backgroundColor","border","placeholder","value","onChange","required","convertUrl","url","defaultUrl","getAction","config","axios","get","postAction","post","setMe","me","sessionStorage","setItem","JSON","stringify","getMe","parse","getItem","removeMe","removeItem","bookStore","form","defaults","headers","common","token","apiService","storeId","Reservation","waitingCount","myTeamCount","status","fetchWaitingCount","_callee","res","regenerator_default","wrap","_context","prev","next","match","params","sent","data","t0","console","error","stop","fetchMyReservation","_callee2","_context2","_callee3","_context3","customerCount","bookingService","alert","message","booking","response","handleChange","e","Object","defineProperty","target","getCallbackUrl","queryParams","location","search","replace","RegExp","notice","src_components_Modal","components_Input","SectionDivider","borderBottom","ImageUpload","ReviewForm","file","handleUpload","preventDefault","reader","FileReader","files","onloadend","result","readAsDataURL","handleSubmit","onCreate","onSubmit","components_ImageUpload","ReviewCard","faAngleRight","Pagination","totalPageCount","pageNo","parseInt","classLeft","classRight","faAngleLeft","getReviewsByStoreId","ReviewList","reviews","fetchStoreReviews","reviewPageNo","reviewService","pushQueryString","renderReviews","review","src_organisms_ReviewCard","title","src_organisms_Pagination","getStoreById","getAroundStores","refreshMe","then","catch","log","StoreDetail","images","reviewFormClass","fetchStoreDetail","storeService","renderStoreCard","renderImages","img","history","push","toggleReviewForm","handleCreate","query","queryString","pathname","components_SectionDivider","src_organisms_ReviewList","src_organisms_ReviewForm","App","src_organisms_StoreList","src_components_Map","Switch","Route","path","component","AuthForm","email","password","rePassword","phone","role","getFormData","formIndex","slice","formData","formEndIndex","input","index","formTitle","Auth","split","pop","login","register","toUrl","href","callbackUrl","renderBtnLink","kind","src_organisms_AuthForm","Router","BrowserRouter","exact","Boolean","hostname","ReactDOM","render","routers_Router","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d8ebd28.chunk.js","sourcesContent":["/* eslint-disable no-useless-constructor,no-loop-func */\n/*global daum*/\n\nimport React, { Component } from 'react';\nimport './Map.scss';\n\nlet map;\n\nclass Map extends Component {\n\n    state = {\n        isSearch: false\n    };\n\n    addEventListener = () => {\n        // 중심 위치 변경 이벤트\n        daum.maps.event.addListener(map, 'center_changed', () => {\n            this.handleMove();\n        });\n\n        // 확대 축소 이벤트\n        daum.maps.event.addListener(map, 'zoom_changed', () => {\n            this.handleMove();\n        });\n    };\n\n    handleMove = () => {\n        this.state.isSearch && this.setState({\n            isSearch: !this.state.isSearch\n        });\n    };\n\n    searchStores = () => {\n        let bounds = map.getBounds();\n        // 현재 지도의 남서쪽 좌표\n        let swLatLng = bounds.getSouthWest();\n        // 현재 지도의 북동쪽 좌표\n        let neLatLng = bounds.getNorthEast();\n\n        let position = {\n            bot: swLatLng.getLat(),\n            left: swLatLng.getLng(),\n            top: neLatLng.getLat(),\n            right: neLatLng.getLng()\n        };\n\n        this.props.handleSearch(position);\n        this.setState({\n            isSearch: !this.state.isSearch\n        });\n        this.renderMarket();\n    };\n\n    renderMarket = () => {\n        this.props.stores.forEach(store => {\n            let marker = new daum.maps.Marker({\n                map: map,\n                position: new daum.maps.LatLng(store.latitude, store.longitude)\n            });\n\n            let overlay = new daum.maps.CustomOverlay({\n                content: store.store_name,\n                map: map,\n                position: marker.getPosition()\n            });\n\n            (function (marker, overlay) {\n                daum.maps.event.addListener(marker, 'click', function () {\n                    overlay.setMap(map);\n                });\n            })(marker, overlay);\n        });\n    };\n\n    showPosition = (position) => {\n        if ((\"daum\" in window)) {\n            let latitude = position.coords.latitude;\n            let longitude = position.coords.longitude;\n            let mapContainer = document.getElementById('map'),\n                mapOption = {\n                    center: new daum.maps.LatLng(latitude, longitude),\n                    level: 3\n                };\n\n            map = new daum.maps.Map(mapContainer, mapOption);\n\n            this.addEventListener();\n        }\n    };\n\n\n    componentDidMount() {\n        let geo_success = (position) => {\n            this.showPosition(position);\n        };\n\n        let geo_error = () => {\n            // alert('허용하지 않으면 이 서비스 사용에 제한됩니다.');\n            this.showPosition({\n                coords: {\n                    latitude: 33.506525,\n                    longitude: 126.492780\n                }\n            });\n        };\n\n        let geo_options = {\n            enableHighAccuracy: true,\n            maximumAge: 30000,\n            timeout: 20000\n        };\n\n        navigator.geolocation.watchPosition(geo_success, geo_error, geo_options);\n    }\n\n\n    render() {\n        return (\n            <div>\n                {\n                    !this.state.isSearch && <div className='research-box'>\n                        <button type='button' className='btn-research' onClick={this.searchStores}>이 위치에서 가게 재검색</button>\n                    </div>\n                }\n                <div id=\"map\" style={{ height: window.innerHeight + 'px' }} />\n            </div>\n        )\n    };\n}\n\nexport default Map;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Image = (props) => {    \n    let styles = {\n        margin: '0',\n        padding : '0',\n        width : '100%',\n        height : '100%',\n    };\n    \n    return (\n        <img src={props.src} alt={props.alt} onError={props.onerror} style={styles} />\n    );\n};\n\nImage.propTypes = {\n    src: PropTypes.string,\n    alt: PropTypes.string,\n    onError: PropTypes.string,\n};\n\nexport default Image;","export const defaultUrl = 'http://api.reservacation.co.kr';\nexport const isMobile = window.screen.width < 775;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { isMobile } from '../_common/const/const';\n\nconst DescriptionBox = (props) => {\n    let width = (isMobile && '') || '100%';\n    let styles = {\n        margin: '0',\n        padding: '0',\n        width: width,\n        height: '100%',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: props.whiteSpace || 'nowrap',\n    };\n\n    return (\n        <p style={styles}>{props.contents}</p>\n    );\n};\n\nDescriptionBox.propTypes = {\n    contents: PropTypes.string.isRequired,\n    whiteSpace: PropTypes.string\n};\n\nexport default DescriptionBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TitleBox = (props) => {\n    let styles = {\n        margin: '0',\n        padding: '0',\n        width: '100%',\n        height: '100%',\n        fontWeight: 'bold',\n    };\n\n    return (\n        <span style={styles}>{props.contents}</span>\n    );\n};\n\nTitleBox.propTypes = {\n    contents: PropTypes.string.isRequired,\n};\n\nexport default TitleBox;","import React from 'react';\nimport Image from '../components/Image';\nimport DescriptionBox from '../components/DescriptionBox';\nimport TitleBox from '../components/TitleBox';\nimport './StoreCard.scss';\nimport PropTypes from 'prop-types';\n\nconst StoreCard = (props) => {\n    const { imgSrc, imgAlt, name, address, tel, description, whiteSpace } = props;\n    \n    return (\n        <article className='store-card'>\n            <section className='store-img'>\n                <Image\n                    src={imgSrc}\n                    alt={imgAlt} />\n            </section>\n            <section className='store-contents'>\n                <section className='store-title'>\n                    <TitleBox contents={name} />\n                </section>\n                <section className='store-description'>\n                    <DescriptionBox contents={address} whiteSpace={whiteSpace} />\n                    <DescriptionBox contents={tel} />\n                    <DescriptionBox contents={description} />\n                </section>\n            </section>\n        </article>\n    );\n};\n\nStoreCard.propTypes = {\n    imgSrc: PropTypes.string,\n    imgAlt: PropTypes.string,\n    name: PropTypes.string,\n    address: PropTypes.string,\n    tel: PropTypes.string,\n    description: PropTypes.string,\n};\n\nexport default StoreCard;","import React, { Component } from 'react';\nimport './StoreList.scss';\nimport { Link } from 'react-router-dom';\nimport StoreCard from '../organisms/StoreCard';\nimport { isMobile } from '../_common/const/const';\n\nclass StoreList extends Component {\n\n    renderStores = () => {\n        let perPageNo = (isMobile && 2) || 5;\n        return this.props.stores.map((store) => {\n            return <article\n                className='store'\n                key={store.id}>\n                <Link to={`stores/${store.id}?reviewPageNo=1&perPageNo=${perPageNo}`}>\n                    <StoreCard\n                        imgSrc={store.img_src}\n                        imgAlt={store.store_name}\n                        name={store.store_name}\n                        address={store.address + store.detail_address}\n                        tel={store.store_tel}\n                        description={store.store_description} />\n                </Link>\n            </article>\n        });\n    };\n\n    render() {\n        return (\n            <div className={(this.props.stores.length && 'store-list') || 'none'}>\n                {this.props.stores && this.renderStores()}\n            </div>\n        );\n    }\n}\n\nexport default StoreList;","import React, { Component } from 'react';\nimport './Modal.scss';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as fontawesome from \"@fortawesome/fontawesome-svg-core\";\nimport { faTimes } from '@fortawesome/fontawesome-free-solid'\n\nfontawesome.library.add(faTimes);\n\nclass Modal extends Component {\n    render() {\n        const { to, children, onClose } = this.props;\n\n        return (\n            <div className='backdrop'>\n                <div className='modal'>\n                    <section className='close'>\n                        <Link to={to} style={{ textDecoration: 'none' }}><FontAwesomeIcon onClick={onClose} icon={faTimes} /></Link>\n                    </section>\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}\n\nModal.propTypes = {\n    to: PropTypes.string.isRequired,\n    children: PropTypes.node,\n};\n\nexport default Modal;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Input = (props) => {\n    let style = {\n        boxSizing: 'border-box',\n        borderRadius: '5px',\n        padding: '10px',\n        margin: '0',\n        width: '100%',\n        fontSize: '13px',\n        backgroundColor: '#fafbfc',\n        border: '1px solid #d1d5da',\n    };\n\n    return (\n        <input style={style}\n            placeholder={props.placeholder}\n            value={props.value}\n            onChange={props.onChange}\n            type={props.type || 'text'}\n            name={props.name}\n            required={props.required}\n        />\n    );\n};\n\nInput.propTypes = {\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    required: PropTypes.bool\n};\n\nexport default Input;","import axios from 'axios';\nimport { defaultUrl } from '../../const/const';\n\nlet convertUrl = (url) => {\n    return defaultUrl + '/' + url;\n};\n\nexport function getAction(url, config) {\n    return axios.get(convertUrl(url), config);\n}\n\nexport function postAction(url, config) {\n    return axios.post(convertUrl(url), config);\n}\n\nexport function putAction(url, config) {\n    return axios.put(convertUrl(url), config);\n}\n\nexport function deleteAction(url, config) {\n    return axios.delete(convertUrl(url), config);\n}\n\nexport function setMe(me) {\n    sessionStorage.setItem('me', JSON.stringify(me));\n}\n\nexport function getMe() {\n    return JSON.parse(sessionStorage.getItem('me'));\n}\n\nexport function removeMe() {\n    sessionStorage.removeItem('me');\n}\n\nexport function setAuthorization() {\n    let me = this.getMe();\n    axios.defaults.headers.common['Authorization'] = `Bearer ${me.token}`;\n}","import * as apiService from '../services/_/api.service';\n\nexport function getWaitingCount(storeId) {\n    return apiService.getAction(`bookings/${storeId}/waitingCount`);\n}\n\nexport function getMyReservation(storeId) {\n    return apiService.getAction(`bookings/${storeId}`)\n}\n\nexport function bookStore(form) {\n    apiService.setAuthorization();\n    return apiService.postAction(`bookings/${form.storeId}`, form);\n}","import React, { Component } from 'react';\nimport './Reservation.scss';\nimport TitleBox from '../components/TitleBox';\nimport Modal from '../components/Modal';\nimport Input from '../components/Input';\nimport DescriptionBox from '../components/DescriptionBox';\nimport * as bookingService from '../_common/services/booking.service';\n\nclass Reservation extends Component {\n\n    state = {\n        waitingCount: 0,\n        myTeamCount: 0,\n        status: ''\n    }\n\n    componentDidMount() {\n        this.fetchWaitingCount();\n        this.fetchMyReservation();\n    }\n\n    fetchWaitingCount = async () => {\n        try {\n            let res = await bookingService.getWaitingCount(this.props.match.params.id);\n            this.setState({\n                waitingCount: res.data.waitingCount\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    fetchMyReservation = async () => {\n        try {\n            let res = await bookingService.getMyReservation(this.props.match.params.id);\n            this.setState({\n                status: res.data.status\n            })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    bookStore = async () => {\n        let form = {\n            storeId: this.props.match.params.id,\n            customerCount: this.state.myTeamCount\n        };\n        try {\n            let res = await bookingService.bookStore(form);\n            alert(res.data.message);\n            res.data.booking && this.setState({\n                status: res.data.booking.status\n            });\n            this.fetchWaitingCount();\n        } catch (error) {\n            error.response.status === 406 && alert(error.response.data.message);\n        }\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    getCallbackUrl = () => {\n        let queryParams = this.props.location.search;\n        return queryParams && queryParams.replace(new RegExp('\\\\?.+url=', 'g'), '');\n    };\n\n    render() {\n        let notice = '';\n        switch (this.state.status) {\n            case 0:\n                notice = '예약이 취소되었습니다. 다음에 이용해주세요!';\n                break;\n            case 1:\n                notice = '가게에서 예약을 확인하고 있습니다. 잠시만 기다려주세요!';\n                break;\n            case 2:\n                notice = '예약이 접수되었습니다. 차례를 기다려주세요!';\n                break;\n            case 3:\n                notice = '차례가 되었습니다!';\n                break;\n            default:\n                notice = '예약 신청하기 버튼을 눌러 예약을 요청하세요!';\n                break;\n        }\n\n        return (\n            <Modal to={this.getCallbackUrl()}>\n                <article className='reservation'>\n                    <button className='btn-request' onClick={this.bookStore}>에약 신청하기</button>\n                    <section className='wait-people'>\n                        <TitleBox contents='예상 대기 팀' />\n                        <div className='wait-count'>{this.state.waitingCount}</div>\n                    </section>\n                    <section className='select-person'>\n                        <TitleBox contents='예약 인원 수' />\n                        <section className='select-input'>\n                            <Input\n                                placeholder='0명'\n                                value={this.state.myTeamCount}\n                                onChange={this.handleChange}\n                                name='myTeamCount' />\n                        </section>\n                    </section>\n                    <section className='reserve-notice'>\n                        <DescriptionBox contents={notice} />\n                    </section>\n                </article>\n            </Modal>\n        );\n    }\n}\n\nexport default Reservation;","import React from 'react';\n\nconst SectionDivider = () => {\n    let style = {\n        width: '100%',\n        height: 0,\n        borderBottom: '1px solid #e6e6e6',\n        margin: '10px 0',\n    };\n\n    return (\n        <div className='section-divider' style={style}/>\n    );\n};\n\nexport default SectionDivider;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ImageUpload = (props) => {\n    return (\n        <input\n            type='file'\n            name={props.name}\n            onChange={props.onChange} />\n    );\n};\n\nImageUpload.propTypes = {\n    name: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default ImageUpload;","import React, { Component } from 'react';\nimport './ReviewForm.scss';\nimport Image from '../components/Image';\nimport ImageUpload from '../components/ImageUpload';\n\nclass ReviewForm extends Component {\n\n    state = {\n        file: '',\n        imgSrc: '',\n        description: '',\n        storeId: this.props.storeId\n    }\n\n    handleUpload = e => {\n        e.preventDefault();\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = () => {\n            this.setState({\n                file: file,\n                imgSrc: reader.result\n            });\n        }\n        reader.readAsDataURL(file)\n    };\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.onCreate(this.state);\n        this.setState({\n            file: '',\n            imgSrc: '',\n            description: '',\n            storeId: this.props.storeId\n        })\n    };\n\n    render() {\n        return (\n            <form className='review-form' onSubmit={this.handleSubmit}>\n                <section className='upload-input'>\n                    <section className='image'>\n                        <section className='thumbnail'>\n                            <Image src={this.state.imgSrc} />\n                        </section>\n                        <section className='image-upload'>\n                            <ImageUpload\n                                name='imgSrc'\n                                onChange={this.handleUpload}\n                            />\n                        </section>\n                    </section>\n                    <textarea className='contents' name='description' onChange={this.handleChange}></textarea>\n                </section>\n                <section className='upload-button'>\n                    <button className='btn-upload' type='submit'>리뷰 등록하기</button>\n                </section>\n            </form>\n        );\n    }\n}\n\nexport default ReviewForm;","import React from 'react';\nimport Image from '../components/Image';\nimport DescriptionBox from '../components/DescriptionBox';\nimport './ReviewCard.scss';\nimport PropTypes from 'prop-types';\n\nconst ReviewCard = (props) => {\n    return (\n        <article className='review-card'>\n            <section className='img'>\n                <Image\n                    src={props.imgSrc}\n                    alt={props.imgAlt} />\n            </section>\n            <section className='description'>\n                <DescriptionBox contents={props.description} />\n            </section>\n        </article>\n    );\n};\n\nReviewCard.propTypes = {\n    imgSrc: PropTypes.string,\n    imgAlt: PropTypes.string,\n    description: PropTypes.string.isRequired,\n};\n\nexport default ReviewCard;","import React, { Component } from 'react';\nimport './Pagination.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as fontawesome from \"@fortawesome/fontawesome-svg-core\";\nimport { faAngleLeft, faAngleRight } from '@fortawesome/fontawesome-free-solid'\n\nfontawesome.library.add(faAngleRight);\n\nclass Pagination extends Component {\n    render() {\n        const { perPageNo, totalPageCount, onClick } = this.props;\n        let pageNo = parseInt(this.props.pageNo);\n        let classLeft = (pageNo === 1 && 'hide') || 'btn-left';\n        let classRight = ((!totalPageCount || parseInt(totalPageCount) === pageNo) && 'hide') || 'btn-right';\n\n        return (\n            <div className='pagination'>\n                <section className={classLeft}>\n                    <FontAwesomeIcon onClick={() => { onClick(pageNo - 1, perPageNo) }} icon={faAngleLeft} />\n                </section>\n                <section className='children'>\n                    {this.props.children}\n                </section>\n                <section className={classRight}>\n                    <FontAwesomeIcon onClick={() => { onClick(pageNo + 1, perPageNo) }} icon={faAngleRight} />\n                </section>\n            </div>\n        );\n    }\n}\n\n\nexport default Pagination;","import * as apiService from '../services/_/api.service';\n\nexport function getReviewsByStoreId(storeId, pageNo, perPageNo) {\n    return apiService.getAction(`reviews/${storeId}?pageNo=${pageNo}&perPageNo=${perPageNo}`);\n}\n\nexport function writeReview(form) {\n    return apiService.postAction('reviews', form);\n}","import React, { Component } from 'react';\nimport './ReviewList.scss';\nimport ReviewCard from '../organisms/ReviewCard';\nimport Pagination from './Pagination';\nimport * as reviewService from '../_common/services/review.service';\n\nclass ReviewList extends Component {\n\n    state = {\n        reviews: ''\n    }\n\n    componentDidMount() {\n        this.fetchStoreReviews(this.props.reviewPageNo, this.props.perPageNo);\n    }\n\n    fetchStoreReviews = async (reviewPageNo, perPageNo) => {\n        let res = await reviewService.getReviewsByStoreId(this.props.id, reviewPageNo - 1, perPageNo);\n\n        this.setState({\n            reviews: res.data,\n        });\n\n        this.props.pushQueryString(reviewPageNo, perPageNo);\n    }\n\n    renderReviews = () => {\n        return (this.state.reviews.totalPageCount\n            && this.state.reviews.data.map(review => {\n                return <div className='review' key={review.id}>\n                    <ReviewCard\n                        imgSrc={review.img_src}\n                        imgAlt={review.title}\n                        description={review.description}\n                    />\n                </div>\n            })) || <div>등록된 리뷰가 없습니다. 리뷰를 남겨주세요!</div>;\n    };\n\n    render() {\n        return (\n            <div className='review-list'>\n                <Pagination\n                    pageNo={this.props.reviewPageNo}\n                    perPageNo={this.props.perPageNo}\n                    totalPageCount={this.state.reviews.totalPageCount}\n                    onClick={this.fetchStoreReviews}>\n                    {this.state.reviews && this.renderReviews()}\n                </Pagination>\n            </div>\n        );\n    }\n}\n\nexport default ReviewList;","import * as apiService from '../services/_/api.service';\n\nexport function getStores() {\n    return apiService.getAction('stores');\n}\n\nexport function getStoreById(id) {\n    return apiService.getAction(`store/${id}`);\n}\n\nexport function getAroundStores(position) {\n    return apiService.getAction(`stores/around?bot=${position.bot}&left=${position.left}&top=${position.top}&right=${position.right}`);\n}","import axios from 'axios';\nimport * as apiService from '../services/_/api.service';\n\nexport function findPassword() {\n\n}\n\nexport function login(form) {\n    return apiService.postAction('auth/token', form);\n}\n\nexport function register(form) {\n    return apiService.postAction('users', form);\n}\n\nexport function setLogin(me) {\n    apiService.setMe(me);\n}\n\nexport function identifyLogin() {\n    refreshMe();\n    return apiService.getMe();\n}\n\nlet refreshMe = () => {\n    let me = apiService.getMe();\n    if (me) {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${me.token}`;\n        apiService.postAction('auth/newToken')\n            .then(res => {\n                apiService.removeMe();\n                apiService.setMe({ token: res.data.token });\n                axios.defaults.headers.common['Authorization'] = `Bearer ${apiService.getMe().token}`;\n            })\n            .catch(error => {\n                console.log(error);\n                apiService.removeMe();\n            });\n    }\n};","import React, { Component } from 'react';\nimport './StoreDetail.scss';\nimport { Link } from 'react-router-dom';\nimport queryString from 'query-string';\nimport Image from '../components/Image';\nimport TitleBox from '../components/TitleBox';\nimport SectionDivider from '../components/SectionDivider';\nimport Modal from '../components/Modal';\nimport StoreCard from '../organisms/StoreCard';\nimport ReviewForm from '../organisms/ReviewForm';\nimport ReviewList from '../organisms/ReviewList';\nimport * as storeService from '../_common/services/store.service';\nimport * as userService from '../_common/services/user.service';\nimport * as reviewService from '../_common/services/review.service';\n\n\nclass StoreDetail extends Component {\n\n    state = {\n        store: '',\n        images: '',\n        reviewFormClass: false\n    }\n\n    componentDidMount() {\n        let id = this.props.match.params.id;\n        id && this.fetchStoreDetail(id);\n    }\n\n    fetchStoreDetail = async (id) => {\n        try {\n            let res = await storeService.getStoreById(id);\n            this.setState({\n                store: res.data.store,\n                images: res.data.images\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    renderStoreCard = () => {\n        let store = this.state.store;\n        return <StoreCard\n            imgSrc={store.img_src}\n            imgAlt={store.store_name}\n            name={store.store_name}\n            address={store.address + store.detail_address}\n            tel={store.store_tel}\n            description={store.store_description}\n            whiteSpace='pre-wrap'\n        />;\n    };\n\n    renderImages = () => {\n        return this.state.images.map(img => {\n            return <div className='img' key={img.id}>\n                <Image\n                    src={img.src}\n                    alt={this.state.store.store_name} />\n            </div>;\n        });\n    };\n\n    pushQueryString = (reviewPageNo, perPageNo) => {\n        this.props.history.push({\n            search: `?reviewPageNo=${reviewPageNo}&perPageNo=${perPageNo}`\n        });\n    };\n\n    toggleReviewForm = () => {\n        this.setState({\n            reviewFormClass: !this.state.reviewFormClass\n        })\n    };\n\n    handleCreate = async (review) => {\n        try {\n            let res = await reviewService.writeReview(review);\n            alert(res.data.message);\n            this.toggleReviewForm();\n        } catch (error) {\n            alert(error.response.data.message);\n        }\n    };\n\n    render() {\n        let id = this.props.match.params.id;\n        let query = queryString.parse(this.props.location.search);\n        let token = userService.identifyLogin();\n\n        return (\n            <Modal to={'/stores'}>\n                <article className='store-detail'>\n                    {(token && <Link to={{\n                        pathname: `/stores/${id}/reserve`,\n                        search: `callback_url=/stores/${id}?reviewPageNo=${query.reviewPageNo}&perPageNo=${query.perPageNo}`\n                    }}>\n                        <button className='btn-reserve'>예약하기</button>\n                    </Link>)\n                        || <Link to={{\n                            pathname: '/auth/login',\n                            search: `callback_url=/stores/${id}?reviewPageNo=${query.reviewPageNo}&perPageNo=${query.perPageNo}`\n                        }}>\n                            <button className='btn-reserve'>로그인 후 예약하기</button>\n                        </Link>}\n                    <SectionDivider />\n                    <section className='store-info'>\n                        {this.state.store && this.renderStoreCard()}\n                    </section>\n                    <SectionDivider />\n                    <TitleBox contents={(this.state.images && `${this.state.store.store_name}의 분위기 넘치는 사진들`) || ''} />\n                    <section className='img-list'>\n                        {this.state.images && this.renderImages()}\n                    </section>\n                    <SectionDivider />\n                    <TitleBox contents={(this.state.images && `${this.state.store.store_name}의 생생한 리뷰들`) || ''} />\n                    <section className='store-reviews'>\n                        <ReviewList\n                            id={id}\n                            reviewPageNo={query.reviewPageNo}\n                            perPageNo={query.perPageNo}\n                            pushQueryString={this.pushQueryString} />\n                    </section>\n                    <SectionDivider />\n                    <section className='review-button'>\n                        {(token && <button className='btn-review' onClick={this.toggleReviewForm}>\n                            {(!this.state.reviewFormClass && '리뷰 작성하기') || '작성 취소'}\n                        </button>)}\n                    </section>\n                    <section className={(this.state.reviewFormClass && 'review-create') || 'review-hidden'}>\n                        <ReviewForm storeId={id} onCreate={this.handleCreate} />\n                    </section>\n                </article>\n            </Modal >\n        );\n    }\n}\n\nexport default StoreDetail;","import React, { Component } from 'react';\nimport './App.scss';\nimport { Route, Switch } from 'react-router-dom';\nimport StoreList from '../organisms/StoreList';\nimport Map from '../components/Map';\nimport Reservation from './Reservation';\nimport StoreDetail from './StoreDetail';\nimport { isMobile } from '../_common/const/const';\nimport * as storeService from '../_common/services/store.service';\n\nclass App extends Component {\n\n    state = {\n        stores: []\n    };\n\n    handleSearch = async (position) => {\n        try {\n            let res = await storeService.getAroundStores(position);\n            this.setState({\n                stores: res.data\n            })\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    render() {\n        return (\n            <div className='main'>\n                {\n                    isMobile || <section className='stores'><StoreList stores={this.state.stores} /></section>\n                }\n                <section className='map'>\n                    <Map stores={this.state.stores} handleSearch={this.handleSearch} />\n                </section>\n                {\n                    !isMobile || <section className='stores'><StoreList stores={this.state.stores} /></section>\n                }\n                <Switch>\n                    <Route path={'/stores/:id/reserve'} component={Reservation} />\n                    <Route path={'/stores/:id'} component={StoreDetail} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport './AuthForm.scss';\nimport Input from '../components/Input';\n\nclass AuthForm extends Component {\n\n    state = {\n        email: '',\n        password: '',\n        rePassword: '',\n        phone: '',\n        name: '',\n        role: 'user'\n    };\n\n    getFormData = (formIndex) => {\n        let formData = [{\n            name: 'email',\n            value: this.state.email,\n            placeholder: 'email@example.com',\n            onChange: this.handleChange,\n        }, {\n            name: 'password',\n            value: this.state.password,\n            placeholder: '비밀번호',\n            onChange: this.handleChange,\n            type: 'password'\n        }, {\n            name: 'rePassword',\n            value: this.state.rePassword,\n            placeholder: '비밀번호 확인',\n            onChange: this.handleChange,\n            type: 'password'\n        }, {\n            name: 'phone',\n            value: this.state.phone,\n            placeholder: '연락처',\n            onChange: this.handleChange\n        }, {\n            name: 'name',\n            value: this.state.name,\n            placeholder: '이름',\n            onChange: this.handleChange\n        }];\n\n        return formData.slice(0, formIndex);\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.rePassword && (this.state.password !== this.state.rePassword)) {\n            alert('패스워드를 확인해주세요.');\n            return;\n        }\n        this.props.onCreate(this.state);\n        this.setState({\n            email: '',\n            password: '',\n            rePassword: '',\n            phone: '',\n            name: ''\n        })\n    };\n\n    render() {\n        let formData = this.getFormData(this.props.formEndIndex);\n\n        return (\n            <form className='auth-form' onSubmit={this.handleSubmit}>\n                {formData.map((input, index) => {\n                    return <section className='form-inner' key={index}>\n                        <Input\n                            name={input.name}\n                            value={input.value}\n                            placeholder={input.placeholder}\n                            onChange={input.onChange}\n                            type={input.type}\n                            required={true}\n                        />\n                    </section>\n                })}\n                <section className='form-inner'>\n                    <button type='submit' className='btn-submit'>{this.props.formTitle}</button>\n                </section>\n            </form>\n        );\n    }\n}\n\nexport default AuthForm;\n","import React, { Component } from 'react';\nimport './Auth.scss';\nimport { Link } from 'react-router-dom';\nimport TitleBox from '../components/TitleBox';\nimport AuthForm from '../organisms/AuthForm';\nimport DescriptionBox from '../components/DescriptionBox';\nimport SectionDivider from '../components/SectionDivider';\nimport * as userService from '../_common/services/user.service';\n\nclass Auth extends Component {\n\n    getCallbackUrl = () => {\n        let queryParams = this.props.location.search;\n        return queryParams && queryParams.replace(new RegExp('\\\\?.+url=', 'g'), '');\n    };\n\n    handleCreate = (formData) => {\n        let kind = this.props.match.path.split('/').pop();\n\n        switch (kind) {\n            case 'findPassword':\n                //TODO: 패스워드 찾기 로직\n                break;\n            case 'login':\n                this.login(formData);\n                break;\n            case 'register':\n                this.register(formData);\n                break;\n            default:\n                console.log('url 오류');\n                break;\n        }\n    };\n\n    login = async (formData) => {\n        try {\n            let res = await userService.login(formData);\n            userService.setLogin(res.data);\n            let toUrl = this.getCallbackUrl() || '/stores';\n            window.location.href = toUrl;\n        } catch (error) {\n            alert(error.response.data.message);\n        }\n    };\n\n    register = async (formData) => {\n        let callbackUrl = this.getCallbackUrl();\n        try {\n            let res = await userService.register(formData);\n            alert(res.data.message);\n            let toUrl = (callbackUrl && `/auth/login?callback_url=${callbackUrl}`) || '/auth/login';\n            window.location.href = toUrl;\n        } catch (error) {\n            alert(error.response.data.message);\n        }\n    };\n\n    renderBtnLink = () => {\n        let callbackUrl = this.getCallbackUrl();\n\n        return <section className='link-list'>\n            <section className='link-box'>\n                <section className='description-box'>\n                    <DescriptionBox contents={'새로 오셨나요?'} />\n                </section>\n                <Link to={{ pathname: '/auth/register', search: `callbackUrl && callback_url=${callbackUrl}` }}>\n                    <button className='btn-link'>회원가입</button>\n                </Link>\n            </section>\n            <SectionDivider />\n            <section className='link-box'>\n                <section className='description-box'>\n                    <DescriptionBox contents={'비밀번호를 잊으셨나요?'} />\n                </section>\n                <Link to={{ pathname: '/auth/findPassword', search: `callback_url=${callbackUrl}` }}>\n                    <button className='btn-link'>비밀번호 찾기</button>\n                </Link>\n            </section>\n        </section>;\n    };\n\n    render() {\n        let kind = this.props.match.path.split('/').pop();\n        let formEndIndex = 0;\n        let formTitle = '';\n        switch (kind) {\n            case 'findPassword':\n                formEndIndex = 1;\n                formTitle = '이메일로 비밀번호 찾기';\n                break;\n            case 'login':\n                formEndIndex = 2;\n                formTitle = '로그인';\n                break;\n            case 'register':\n                formEndIndex = 5;\n                formTitle = '회원가입'\n                break;\n            default:\n                console.log('url 오류');\n                break;\n        }\n\n        return (\n            <article className='auth'>\n                <section className='title'>\n                    <section className='logo'>\n                        <Link to='/stores'>\n                            <img src='' alt='로고' />\n                        </Link>\n                    </section>\n                    <TitleBox contents={`Reservacation ${formTitle}`} />\n                </section>\n                <AuthForm formEndIndex={formEndIndex} formTitle={formTitle} onCreate={this.handleCreate} />\n                {kind === 'login' && this.renderBtnLink()}\n            </article>\n        );\n    }\n}\n\nexport default Auth;","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport App from '../pages/App';\nimport Auth from '../pages/Auth';\n\nclass Router extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div>\n                    <Route exact path=\"/\" component={App} />\n                    <Route path=\"/stores\" component={App} />\n                    <Route path='/auth/login' component={Auth} />\n                    <Route path='/auth/register' component={Auth} />\n                    <Route path='/auth/findPassword' component={Auth} />\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './routers/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}